def math(axis_list, operation):
    returnValue = []
    for cord in axis_list[0]:
        if operation == "Sum":
            returnValue.append(0) 
        if operation == "Difference" or operation == "Division":
            returnValue.append(cord)
        if operation == "Mutliplication":
            returnValue.append(1) 
        
    if operation == "Sum":
        for list in axis_list:
            counter = 0
            for cord in list:
                returnValue[counter] = returnValue[counter] + cord
                counter = counter + 1
    if operation == "Mutliplication":
        for list in axis_list:
            counter = 0
            for cord in list:
                returnValue[counter] = returnValue[counter] * cord
                counter = counter + 1
    if operation == "Difference": 
        counter = 0
        for list in axis_list:
            counter2 = 0
            if counter > 0:
                for cord in list:
                    returnValue[counter2] = returnValue[counter2] - cord
                    counter2 = counter2 + 1    
            counter = counter + 1
    
    if operation == "Division": 
        counter = 0
        for list in axis_list:
            counter2 = 0
            if counter > 0:
                for cord in list:
                    returnValue[counter2] = returnValue[counter2] / cord
                    counter2 = counter2 + 1    
            counter = counter + 1 
    return returnValue


#---------ARCHIVED FOR NOW-------------
#Makes subplots using to first row of data as the x-values for all of them
#and the successive rows of data as the y-values of each subplot
def plot_subplots(data, x_lim=None, y_lim=None,
                  title=None, xtitle=None, ytitle=None):
    if isinstance(data, pd.DataFrame):
        data = data.values
    data = np.array(data)
        
    X = data[0]
    Y = data[1:]
    fig = make_subplots(rows = Y.shape[0], cols = 1)
    
    #making seperate subplots for each line
    for i, y_ax in enumerate(Y):
        fig.add_trace(
            go.Scatter(x=X, y=y_ax, mode='lines', name=str(i)),
            row = i+1, col = 1
        )
        
        #customizing subplot
        #fig.update_xaxes(title_text=xtitle, range=x_lim, row=i+1, col=1)
        #fig.update_yaxes(title_text=ytitle, range=y_lim, row=i+1, col=1)
    return fig